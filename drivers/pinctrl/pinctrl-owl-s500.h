// SPDX-License-Identifier: GPL-2.0+
/*
 * Actions Semi S500
 *
 * Copyright (c) 2017 Andreas FÃ¤rber
 */
#ifndef PINCTRL_OWL_S500_H
#define PINCTRL_OWL_S500_H

enum s500_pins {
	/* GPIOA */
	S500_GPIOA0,
	S500_GPIOA1,
	S500_GPIOA2,
	S500_GPIOA3,
	S500_GPIOA4,
	S500_GPIOA5,
	S500_GPIOA6,
	S500_GPIOA7,
	S500_GPIOA8,
	S500_GPIOA9,
	S500_GPIOA10,
	S500_GPIOA11,
	S500_NAND_DQS,
	S500_NAND_DQSN,
	S500_ETH_TXD0,
	S500_ETH_TXD1,
	S500_ETH_TXEN,
	S500_ETH_RXER,
	S500_ETH_CRS_DV,
	S500_ETH_RXD1,
	S500_ETH_RXD0,
	S500_ETH_REF_CLK,
	S500_ETH_MDC,
	S500_ETH_MDIO,
	S500_SIRQ0,
	S500_SIRQ1,
	S500_SIRQ2,
	S500_I2S_D0,
	S500_I2S_BCLK0,
	S500_I2S_LRCLK0,
	S500_I2S_MCLK0,
	S500_I2S_D1,
	/* GPIOB */
	S500_I2S_BCLK1,
	S500_I2S_LRCLK1,
	S500_I2S_MCLK1,
	S500_KS_IN0,
	S500_KS_IN1,
	S500_KS_IN2,
	S500_KS_IN3,
	S500_KS_OUT0,
	S500_KS_OUT1,
	S500_KS_OUT2,
	S500_OEP,
	S500_OEN,
	S500_ODP,
	S500_ODN,
	S500_OCP,
	S500_OCN,
	S500_OBP,
	S500_OBN,
	S500_OAP,
	S500_OAN,
	S500_EEP,
	S500_EEN,
	S500_EDP,
	S500_EDN,
	S500_ECP,
	S500_ECN,
	S500_EBP,
	S500_EBN,
	S500_EAP,
	S500_EAN,
	S500_LCD0_D18,
	S500_LCD0_D17,
	/* GPIOC */
	S500_DSI_DP3,
	S500_DSI_DN3,
	S500_DSI_DP1,
	S500_DSI_DN1,
	S500_DSI_CP,
	S500_DSI_CN,
	S500_DSI_DP0,
	S500_DSI_DN0,
	S500_DSI_DP2,
	S500_DSI_DN2,
	S500_SD0_D0,
	S500_SD0_D1,
	S500_SD0_D2,
	S500_SD0_D3,
	S500_SD0_D4,
	S500_SD0_D5,
	S500_SD0_D6,
	S500_SD0_D7,
	S500_SD0_CMD,
	S500_SD0_CLK,
	S500_SD1_CMD,
	S500_SD1_CLK,
	S500_SPI0_SCLK,
	S500_SPI0_SS,
	S500_SPI0_MISO,
	S500_SPI0_MOSI,
	S500_UART0_RX,
	S500_UART0_TX,
	S500_TWI0_SCLK,
	S500_TWI0_SDATA,
	S500_GPIOC30,
	S500_SR0_PCLK,
	/* GPIOD */
	S500_GPIOD0,
	S500_GPIOD1,
	S500_GPIOD2,
	S500_GPIOD3,
	S500_GPIOD4,
	S500_GPIOD5,
	S500_GPIOD6,
	S500_GPIOD7,
	S500_GPIOD8,
	S500_GPIOD9,
	S500_SR0_CKOUT,
	S500_GPIOD11,
	S500_NAND_ALE,
	S500_NAND_CLE,
	S500_NAND_CE0B,
	S500_NAND_CE1B,
	S500_NAND_CE2B,
	S500_NAND_CE3B,
	S500_UART2_RX,
	S500_UART2_TX,
	S500_UART2_RTSB,
	S500_UART2_CTSB,
	S500_UART3_RX,
	S500_UART3_TX,
	S500_UART3_RTSB,
	S500_UART3_CTSB,
	S500_GPIOD26,
	S500_GPIOD27,
	S500_PCM1_IN,
	S500_PCM1_CLK,
	S500_PCM1_SYNC,
	S500_PCM1_OUT,
	/* GPIOE */
	S500_TWI1_SCLK,
	S500_TWI1_SDATA,
	S500_TWI2_SCLK,
	S500_TWI2_SDATA,
	/* others */
	S500_CSI_DN0,
	S500_CSI_DP0,
	S500_CSI_DN1,
	S500_CSI_DP1,
	S500_CSI_DN2,
	S500_CSI_DP2,
	S500_CSI_DN3,
	S500_CSI_DP3,
	S500_CSI_CN,
	S500_CSI_CP,
	S500_NAND_D0,
	S500_NAND_D1,
	S500_NAND_D2,
	S500_NAND_D3,
	S500_NAND_D4,
	S500_NAND_D5,
	S500_NAND_D6,
	S500_NAND_D7,
	S500_NAND_RB,
	S500_NAND_RDB,
	S500_NAND_RDBN,
	S500_NAND_WRB,
	S500_PORB,
	S500_CLKO_24M,
	/* TODO BSEL, PKG0..3? */
};

static const struct pinctrl_pin_desc s500_pins[] = {
	PINCTRL_PIN(S500_GPIOA0, "gpioa0"),
	PINCTRL_PIN(S500_GPIOA1, "gpioa1"),
	PINCTRL_PIN(S500_GPIOA2, "gpioa2"),
	PINCTRL_PIN(S500_GPIOA3, "gpioa3"),
	PINCTRL_PIN(S500_GPIOA4, "gpioa4"),
	PINCTRL_PIN(S500_GPIOA5, "gpioa5"),
	PINCTRL_PIN(S500_GPIOA6, "gpioa6"),
	PINCTRL_PIN(S500_GPIOA7, "gpioa7"),
	PINCTRL_PIN(S500_GPIOA8, "gpioa8"),
	PINCTRL_PIN(S500_GPIOA9, "gpioa9"),
	PINCTRL_PIN(S500_GPIOA10, "gpioa10"),
	PINCTRL_PIN(S500_GPIOA11, "gpioa11"),
	PINCTRL_PIN(S500_NAND_DQS, "nand_dqs"),
	PINCTRL_PIN(S500_NAND_DQSN, "nand_dqsn"),
	PINCTRL_PIN(S500_ETH_TXD0, "eth_txd0"),
	PINCTRL_PIN(S500_ETH_TXD1, "eth_txd1"),
	PINCTRL_PIN(S500_ETH_TXEN, "eth_txen"),
	PINCTRL_PIN(S500_ETH_RXER, "eth_rxer"),
	PINCTRL_PIN(S500_ETH_CRS_DV, "eth_crs_dv"),
	PINCTRL_PIN(S500_ETH_RXD1, "eth_rxd1"),
	PINCTRL_PIN(S500_ETH_RXD0, "eth_rxd0"),
	PINCTRL_PIN(S500_ETH_REF_CLK, "eth_ref_clk"),
	PINCTRL_PIN(S500_ETH_MDC, "eth_mdc"),
	PINCTRL_PIN(S500_ETH_MDIO, "eth_mdio"),
	PINCTRL_PIN(S500_SIRQ0, "sirq0"),
	PINCTRL_PIN(S500_SIRQ1, "sirq1"),
	PINCTRL_PIN(S500_SIRQ2, "sirq2"),
	PINCTRL_PIN(S500_I2S_D0, "i2s_d0"),
	PINCTRL_PIN(S500_I2S_BCLK0, "i2s_bclk0"),
	PINCTRL_PIN(S500_I2S_LRCLK0, "i2s_lrclk0"),
	PINCTRL_PIN(S500_I2S_MCLK0, "i2s_mclk0"),
	PINCTRL_PIN(S500_I2S_D1, "i2s_d1"),
	PINCTRL_PIN(S500_I2S_BCLK1, "i2s_bclk1"),
	PINCTRL_PIN(S500_I2S_LRCLK1, "i2s_lrclk1"),
	PINCTRL_PIN(S500_I2S_MCLK1, "i2s_mclk1"),
	PINCTRL_PIN(S500_KS_IN0, "ks_in0"),
	PINCTRL_PIN(S500_KS_IN1, "ks_in1"),
	PINCTRL_PIN(S500_KS_IN2, "ks_in2"),
	PINCTRL_PIN(S500_KS_IN3, "ks_in3"),
	PINCTRL_PIN(S500_KS_OUT0, "ks_out0"),
	PINCTRL_PIN(S500_KS_OUT1, "ks_out1"),
	PINCTRL_PIN(S500_KS_OUT2, "ks_out2"),
	PINCTRL_PIN(S500_OEP, "ks_oep"),
	PINCTRL_PIN(S500_OEN, "ks_oen"),
	PINCTRL_PIN(S500_ODP, "ks_odp"),
	PINCTRL_PIN(S500_ODN, "ks_odn"),
	PINCTRL_PIN(S500_OCP, "ks_ocp"),
	PINCTRL_PIN(S500_OCN, "ks_ocn"),
	PINCTRL_PIN(S500_OBP, "ks_obp"),
	PINCTRL_PIN(S500_OBN, "ks_obn"),
	PINCTRL_PIN(S500_OAP, "ks_oap"),
	PINCTRL_PIN(S500_OAN, "ks_oan"),
	PINCTRL_PIN(S500_EEP, "ks_eep"),
	PINCTRL_PIN(S500_EEN, "ks_een"),
	PINCTRL_PIN(S500_EDP, "ks_edp"),
	PINCTRL_PIN(S500_EDN, "ks_edn"),
	PINCTRL_PIN(S500_ECP, "ks_ecp"),
	PINCTRL_PIN(S500_ECN, "ks_ecn"),
	PINCTRL_PIN(S500_EBP, "ks_ebp"),
	PINCTRL_PIN(S500_EBN, "ks_ebn"),
	PINCTRL_PIN(S500_EAP, "ks_eap"),
	PINCTRL_PIN(S500_EAN, "ks_ean"),
	PINCTRL_PIN(S500_LCD0_D18, "lcd0_d18"),
	PINCTRL_PIN(S500_LCD0_D17, "lcd0_d17"),
	PINCTRL_PIN(S500_DSI_DP3, "dsi_dp3"),
	PINCTRL_PIN(S500_DSI_DN3, "dsi_dn3"),
	PINCTRL_PIN(S500_DSI_DP1, "dsi_dp1"),
	PINCTRL_PIN(S500_DSI_DN1, "dsi_dn1"),
	PINCTRL_PIN(S500_DSI_CP, "dsi_cp"),
	PINCTRL_PIN(S500_DSI_CN, "dsi_cn"),
	PINCTRL_PIN(S500_DSI_DP0, "dsi_dp0"),
	PINCTRL_PIN(S500_DSI_DN0, "dsi_dn0"),
	PINCTRL_PIN(S500_DSI_DP2, "dsi_dp2"),
	PINCTRL_PIN(S500_DSI_DN2, "dsi_dn2"),
	PINCTRL_PIN(S500_SD0_D0, "sd0_d0"),
	PINCTRL_PIN(S500_SD0_D1, "sd0_d1"),
	PINCTRL_PIN(S500_SD0_D2, "sd0_d2"),
	PINCTRL_PIN(S500_SD0_D3, "sd0_d3"),
	PINCTRL_PIN(S500_SD0_D4, "sd0_d4"),
	PINCTRL_PIN(S500_SD0_D5, "sd0_d5"),
	PINCTRL_PIN(S500_SD0_D6, "sd0_d6"),
	PINCTRL_PIN(S500_SD0_D7, "sd0_d7"),
	PINCTRL_PIN(S500_SD0_CMD, "sd0_cmd"),
	PINCTRL_PIN(S500_SD0_CLK, "sd0_clk"),
	PINCTRL_PIN(S500_SD1_CMD, "sd1_cmd"),
	PINCTRL_PIN(S500_SD1_CLK, "sd1_clk"),
	PINCTRL_PIN(S500_SPI0_SCLK, "spi0_sclk"),
	PINCTRL_PIN(S500_SPI0_SS, "spi0_ss"),
	PINCTRL_PIN(S500_SPI0_MISO, "spi0_miso"),
	PINCTRL_PIN(S500_SPI0_MOSI, "spi0_mosi"),
	PINCTRL_PIN(S500_UART0_RX, "uart0_rx"),
	PINCTRL_PIN(S500_UART0_TX, "uart0_tx"),
	PINCTRL_PIN(S500_TWI0_SCLK, "twi0_sclk"),
	PINCTRL_PIN(S500_TWI0_SDATA, "twi0_sdata"),
	PINCTRL_PIN(S500_GPIOC30, "gpioc30"),
	PINCTRL_PIN(S500_SR0_PCLK, "sr0_pclk"),
	PINCTRL_PIN(S500_GPIOD0, "gpiod0"),
	PINCTRL_PIN(S500_GPIOD1, "gpiod1"),
	PINCTRL_PIN(S500_GPIOD2, "gpiod2"),
	PINCTRL_PIN(S500_GPIOD3, "gpiod3"),
	PINCTRL_PIN(S500_GPIOD4, "gpiod4"),
	PINCTRL_PIN(S500_GPIOD5, "gpiod5"),
	PINCTRL_PIN(S500_GPIOD6, "gpiod6"),
	PINCTRL_PIN(S500_GPIOD7, "gpiod7"),
	PINCTRL_PIN(S500_GPIOD8, "gpiod8"),
	PINCTRL_PIN(S500_GPIOD9, "gpiod9"),
	PINCTRL_PIN(S500_SR0_CKOUT, "sr0_ckout"),
	PINCTRL_PIN(S500_GPIOD11, "gpiod11"),
	PINCTRL_PIN(S500_NAND_ALE, "nand_ale"),
	PINCTRL_PIN(S500_NAND_CLE, "nand_cle"),
	PINCTRL_PIN(S500_NAND_CE0B, "nand_ce0b"),
	PINCTRL_PIN(S500_NAND_CE1B, "nand_ce1b"),
	PINCTRL_PIN(S500_NAND_CE2B, "nand_ce2b"),
	PINCTRL_PIN(S500_NAND_CE3B, "nand_ce3b"),
	PINCTRL_PIN(S500_UART2_RX, "uart2_rx"),
	PINCTRL_PIN(S500_UART2_TX, "uart2_tx"),
	PINCTRL_PIN(S500_UART2_RTSB, "uart2_rtsb"),
	PINCTRL_PIN(S500_UART2_CTSB, "uart2_ctsb"),
	PINCTRL_PIN(S500_UART3_RX, "uart3_rx"),
	PINCTRL_PIN(S500_UART3_TX, "uart3_tx"),
	PINCTRL_PIN(S500_UART3_RTSB, "uart3_rtsb"),
	PINCTRL_PIN(S500_UART3_CTSB, "uart3_ctsb"),
	PINCTRL_PIN(S500_GPIOD26, "gpiod26"),
	PINCTRL_PIN(S500_GPIOD27, "gpiod27"),
	PINCTRL_PIN(S500_PCM1_IN, "pcm1_in"),
	PINCTRL_PIN(S500_PCM1_CLK, "pcm1_clk"),
	PINCTRL_PIN(S500_PCM1_SYNC, "pcm1_sync"),
	PINCTRL_PIN(S500_PCM1_OUT, "pcm1_out"),
	PINCTRL_PIN(S500_TWI1_SCLK, "twi1_sclk"),
	PINCTRL_PIN(S500_TWI1_SDATA, "twi1_sdata"),
	PINCTRL_PIN(S500_TWI2_SCLK, "twi2_sclk"),
	PINCTRL_PIN(S500_TWI2_SDATA, "twi2_sdata"),
};

static const unsigned int s500_i2s_d0_pins[] = { S500_I2S_D0 };
static const unsigned int s500_i2s_d1_pins[] = { S500_I2S_D1 };
static const unsigned int s500_uart3_rx_pins[] = { S500_UART3_RX };
static const unsigned int s500_uart3_tx_pins[] = { S500_UART3_TX };

static const unsigned int s500_lvds_o_pn_pins[] = { S500_OEP, S500_OEN,
						    S500_ODP, S500_ODN,
						    S500_OCP, S500_OCN,
						    S500_OBP, S500_OBN,
						    S500_OAP, S500_OAN };

static const unsigned int s500_uart3_pins[] = { S500_UART3_RX, S500_UART3_TX };

#define S500_GROUP(_name) \
	{ \
		.name = # _name, \
		.pins = s500_ ## _name ## _pins, \
		.num_pins = ARRAY_SIZE(s500_ ## _name ## _pins), \
	}

static const struct owl_pin_group_desc s500_pin_groups[] = {
	S500_GROUP(i2s_d0),
	S500_GROUP(i2s_d1),
	S500_GROUP(uart3_rx),
	S500_GROUP(uart3_tx),

	S500_GROUP(lvds_o_pn),

	S500_GROUP(uart3),
};

static const char * const s500_lcd0_groups[] = { "lvds_o_pn" };
static const char * const s500_lvds_groups[] = { "lvds_o_pn" };

static const char * const s500_uart3_groups[] = { "uart3" };

#define S500_FUNC(_name) \
	{ \
		.name = # _name, \
		.groups = s500_ ## _name ## _groups, \
		.num_groups = ARRAY_SIZE(s500_ ## _name ## _groups), \
	}

static const struct owl_pin_func_desc s500_pin_functions[] = {
	S500_FUNC(lcd0),
	S500_FUNC(lvds),

	S500_FUNC(uart3),
};

#define S500_MFP_CTL0	0x0
#define S500_MFP_CTL1	0x4
#define S500_MFP_CTL2	0x8
#define S500_MFP_CTL3	0xc

static const struct owl_pin_desc s500_pin_muxes[] = {
	OWL_PIN_MUX(i2s_d1, S500_MFP_CTL0, BIT(0),
		OWL_PIN_FUNC(0x0, "i2s"),
		OWL_PIN_FUNC(0x1, "nor")),
	OWL_PIN_MUX(i2s_pcm0, S500_MFP_CTL0, GENMASK(2, 1),
		OWL_PIN_FUNC(0x0, "i2s"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "pcm")),
	OWL_PIN_MUX(i2s_pcm1, S500_MFP_CTL0, GENMASK(4, 3),
		OWL_PIN_FUNC(0x0, "i2s"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "pcm")),
	OWL_PIN_MUX(i2s_d0, S500_MFP_CTL0, BIT(5),
		OWL_PIN_FUNC(0x0, "i2s"),
		OWL_PIN_FUNC(0x1, "nor")),
	OWL_PIN_MUX(eth_ref_clk, S500_MFP_CTL0, GENMASK(7, 6),
		OWL_PIN_FUNC(0x0, "rmii"),
		OWL_PIN_FUNC(0x1, "uart4"),
		OWL_PIN_FUNC(0x2, "spi2")),
	OWL_PIN_MUX(rmii_rxd10, S500_MFP_CTL0, GENMASK(10, 8),
		OWL_PIN_FUNC(0x0, "rmii"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi3"),
		OWL_PIN_FUNC(0x3, "pwm"),
		OWL_PIN_FUNC(0x4, "uart5")),
	OWL_PIN_MUX(rmii_txen_rxer, S500_MFP_CTL0, GENMASK(15, 13),
		OWL_PIN_FUNC(0x0, "rmii"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi3"),
		OWL_PIN_FUNC(0x3, "pwm")),
	OWL_PIN_MUX(rmii_txd10, S500_MFP_CTL0, GENMASK(18, 16),
		OWL_PIN_FUNC(0x0, "rmii"),
		OWL_PIN_FUNC(0x1, "smii"),
		OWL_PIN_FUNC(0x2, "spi2"),
		OWL_PIN_FUNC(0x3, "uart6"),
		OWL_PIN_FUNC(0x4, "pwm")),
	OWL_PIN_MUX(eth_crs_dv, S500_MFP_CTL0, GENMASK(22, 20),
		OWL_PIN_FUNC(0x0, "rmii"),
		OWL_PIN_FUNC(0x1, "smii"),
		OWL_PIN_FUNC(0x2, "spi2"),
		OWL_PIN_FUNC(0x3, "uart4"),
		OWL_PIN_FUNC(0x4, "pwm")),
	OWL_PIN_MUX(lcd0_d18, S500_MFP_CTL0, GENMASK(25, 23),
		OWL_PIN_FUNC(0x0, "nor"),
		OWL_PIN_FUNC(0x1, "sens1"),
		OWL_PIN_FUNC(0x2, "pwm2"),
		OWL_PIN_FUNC(0x3, "pwm4"),
		OWL_PIN_FUNC(0x4, "lcd0_d18")),

	OWL_PIN_MUX(spi0_i2s_pcm, S500_MFP_CTL1, GENMASK(2, 0),
		OWL_PIN_FUNC(0x0, "spi0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "i2s"),
		OWL_PIN_FUNC(0x3, "pcm1"),
		OWL_PIN_FUNC(0x4, "pcm0")),
	OWL_PIN_MUX(spi0_twi_pcm, S500_MFP_CTL1, GENMASK(4, 3),
		OWL_PIN_FUNC(0x0, "spi0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "twi3"),
		OWL_PIN_FUNC(0x3, "pcm0")),
	OWL_PIN_MUX(lvds_ee_pn1, S500_MFP_CTL1, GENMASK(6, 5),
		OWL_PIN_FUNC(0x0, "lvds"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x3, "lcd0")),
	OWL_PIN_MUX(dsi_dp0, S500_MFP_CTL1, GENMASK(9, 7),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x2, "sd0"),
		OWL_PIN_FUNC(0x3, "uart2"),
		OWL_PIN_FUNC(0x4, "spi0")),
	OWL_PIN_MUX(dsi_dn3, S500_MFP_CTL1, GENMASK(11, 10),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x2, "sd1"),
		OWL_PIN_FUNC(0x3, "lcd0")),
	OWL_PIN_MUX(dsi_dp3, S500_MFP_CTL1, GENMASK(13, 12),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x1, "sd1_clkb"),
		OWL_PIN_FUNC(0x2, "sd1_clk"),
		OWL_PIN_FUNC(0x3, "lcd0")),
	OWL_PIN_MUX(lcd0_d17, S500_MFP_CTL1, GENMASK(16, 14),
		OWL_PIN_FUNC(0x0, "nor"),
		OWL_PIN_FUNC(0x1, "sd0"),
		OWL_PIN_FUNC(0x2, "sd1"),
		OWL_PIN_FUNC(0x3, "pwm"),
		OWL_PIN_FUNC(0x4, "lcd0")),
	OWL_PIN_MUX(dsi_dp2, S500_MFP_CTL1, GENMASK(18, 17),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi0"),
		OWL_PIN_FUNC(0x3, "sd1")),
	OWL_PIN_MUX(dsi_dn0, S500_MFP_CTL1, GENMASK(20, 19),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi0")),
	OWL_PIN_MUX(lvds_o_pn, S500_MFP_CTL1, GENMASK(22, 21),
		OWL_PIN_FUNC(0x0, "lvds"),
		OWL_PIN_FUNC(0x2, "lcd0")),
	OWL_PIN_MUX(ks_out2, S500_MFP_CTL1, GENMASK(25, 23),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "ks"),
		OWL_PIN_FUNC(0x2, "nor"),
		OWL_PIN_FUNC(0x3, "pwm"),
		OWL_PIN_FUNC(0x4, "uart5"),
		OWL_PIN_FUNC(0x5, "sens1")),
	OWL_PIN_MUX(ks_in3_out01, S500_MFP_CTL1, GENMASK(28, 26),
		OWL_PIN_FUNC(0x0, "ks"),
		OWL_PIN_FUNC(0x1, "jtag"),
		OWL_PIN_FUNC(0x2, "nor"),
		OWL_PIN_FUNC(0x3, "pwm"),
		OWL_PIN_FUNC(0x5, "sens1"),
		OWL_PIN_FUNC(0x6, "sd0")),
	OWL_PIN_MUX(ks_in02, S500_MFP_CTL1, GENMASK(31, 29),
		OWL_PIN_FUNC(0x0, "ks"),
		OWL_PIN_FUNC(0x1, "jtag"),
		OWL_PIN_FUNC(0x2, "nor"),
		OWL_PIN_FUNC(0x3, "pwm0"),
		OWL_PIN_FUNC(0x4, "pwm4"),
		OWL_PIN_FUNC(0x5, "sens1")),

	OWL_PIN_MUX(uart0_rx, S500_MFP_CTL2, GENMASK(2, 0),
		OWL_PIN_FUNC(0x0, "uart0"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi1"),
		OWL_PIN_FUNC(0x3, "twi0"),
		OWL_PIN_FUNC(0x4, "pcm1"),
		OWL_PIN_FUNC(0x5, "i2s")),
	OWL_PIN_MUX(sd1_cmd, S500_MFP_CTL2, GENMASK(4, 3),
		OWL_PIN_FUNC(0x0, "sd1"),
		OWL_PIN_FUNC(0x1, "nor")),
	OWL_PIN_MUX(sd0_clk, S500_MFP_CTL2, GENMASK(6, 5),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x2, "jtag")),
	OWL_PIN_MUX(sd0_cmd, S500_MFP_CTL2, GENMASK(8, 7),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x3, "jtag")),
	OWL_PIN_MUX(sd1_d0_d3, S500_MFP_CTL2, GENMASK(10, 9),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x3, "sd1")),
	OWL_PIN_MUX(sd0_d2_d3, S500_MFP_CTL2, GENMASK(13, 11),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x3, "jtag"),
		OWL_PIN_FUNC(0x4, "uart2"),
		OWL_PIN_FUNC(0x5, "uart1")),
	OWL_PIN_MUX(sd0_d1, S500_MFP_CTL2, GENMASK(16, 14),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x4, "uart2"),
		OWL_PIN_FUNC(0x5, "uart5")),
	OWL_PIN_MUX(sd0_d0, S500_MFP_CTL2, GENMASK(19, 17),
		OWL_PIN_FUNC(0x0, "sd0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x3, "jtag"),
		OWL_PIN_FUNC(0x4, "uart2"),
		OWL_PIN_FUNC(0x5, "uart5")),
	OWL_PIN_MUX(uart3_ctsb, S500_MFP_CTL2, BIT(20),
		OWL_PIN_FUNC(0x0, "uart3"),
		OWL_PIN_FUNC(0x1, "uart5")),
	OWL_PIN_MUX(uart3_rtsb, S500_MFP_CTL2, BIT(21),
		OWL_PIN_FUNC(0x0, "uart3"),
		OWL_PIN_FUNC(0x1, "uart5")),
	OWL_PIN_MUX(uart2_ctsb, S500_MFP_CTL2, BIT(22),
		OWL_PIN_FUNC(0x0, "uart2"),
		OWL_PIN_FUNC(0x1, "uart0")),
	OWL_PIN_MUX(uart2_rtsb, S500_MFP_CTL2, BIT(23),
		OWL_PIN_FUNC(0x0, "uart2"),
		OWL_PIN_FUNC(0x1, "uart0")),
	OWL_PIN_MUX(dsi_dn2, S500_MFP_CTL2, GENMASK(26, 24),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x2, "sd1"),
		OWL_PIN_FUNC(0x3, "uart2"),
		OWL_PIN_FUNC(0x4, "spi0")),
	OWL_PIN_MUX(lvds_e_pn, S500_MFP_CTL2, GENMASK(28, 27),
		OWL_PIN_FUNC(0x0, "lvds"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "lcd0")),
	OWL_PIN_MUX(dsi_dnp1_cp, S500_MFP_CTL2, GENMASK(30, 29),
		OWL_PIN_FUNC(0x0, "dsi"),
		OWL_PIN_FUNC(0x1, "sd1"),
		OWL_PIN_FUNC(0x2, "lcd0")),

	OWL_PIN_MUX(dnand_ce2_3, S500_MFP_CTL3, GENMASK(1, 0),
		OWL_PIN_FUNC(0x0, "nand"),
		OWL_PIN_FUNC(0x1, "pwm")),
	OWL_PIN_MUX(dnand_acle_ce0_1, S500_MFP_CTL3, BIT(2),
		OWL_PIN_FUNC(0x0, "nand"),
		OWL_PIN_FUNC(0x1, "spi2")),
	OWL_PIN_MUX(dnand_data_wr, S500_MFP_CTL3, BIT(3),
		OWL_PIN_FUNC(0x0, "nand"),
		OWL_PIN_FUNC(0x1, "sd2")),
	OWL_PIN_MUX(pcm1_out, S500_MFP_CTL3, GENMASK(5, 4),
		OWL_PIN_FUNC(0x0, "pcm1"),
		OWL_PIN_FUNC(0x1, "sens1"),
		OWL_PIN_FUNC(0x2, "uart6"),
		OWL_PIN_FUNC(0x3, "twi3")),
	OWL_PIN_MUX(pcm1_sync, S500_MFP_CTL3, GENMASK(7, 6),
		OWL_PIN_FUNC(0x0, "pcm1"),
		OWL_PIN_FUNC(0x1, "sens1"),
		OWL_PIN_FUNC(0x2, "uart6"),
		OWL_PIN_FUNC(0x3, "twi3")),
	OWL_PIN_MUX(pcm1_clk, S500_MFP_CTL3, GENMASK(9, 8),
		OWL_PIN_FUNC(0x0, "pcm1"),
		OWL_PIN_FUNC(0x1, "sens1"),
		OWL_PIN_FUNC(0x2, "uart4"),
		OWL_PIN_FUNC(0x3, "pwm")),
	OWL_PIN_MUX(pcm1_in, S500_MFP_CTL3, GENMASK(11, 10),
		OWL_PIN_FUNC(0x0, "pcm1"),
		OWL_PIN_FUNC(0x1, "sens1"),
		OWL_PIN_FUNC(0x2, "uart4"),
		OWL_PIN_FUNC(0x3, "pwm")),
	OWL_PIN_MUX(sens0_pclk, S500_MFP_CTL3, GENMASK(13, 12),
		OWL_PIN_FUNC(0x0, "sens0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "pwm")),
	OWL_PIN_MUX(csi_dn_dp, S500_MFP_CTL3, GENMASK(15, 14),
		OWL_PIN_FUNC(0x0, "csi"),
		OWL_PIN_FUNC(0x1, "sens0")),
	OWL_PIN_MUX(twi0_mfp, S500_MFP_CTL3, GENMASK(18, 16),
		OWL_PIN_FUNC(0x0, "twi0"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "twi1"),
		OWL_PIN_FUNC(0x3, "uart1"),
		OWL_PIN_FUNC(0x4, "spi1")),
	OWL_PIN_MUX(uart0_tx, S500_MFP_CTL3, GENMASK(21, 19),
		OWL_PIN_FUNC(0x0, "uart0"),
		OWL_PIN_FUNC(0x1, "uart2"),
		OWL_PIN_FUNC(0x2, "spi1"),
		OWL_PIN_FUNC(0x3, "twi0"),
		OWL_PIN_FUNC(0x4, "spdif"),
		OWL_PIN_FUNC(0x5, "pcm1"),
		OWL_PIN_FUNC(0x6, "i2s")),
	OWL_PIN_MUX(sens0_ckout, S500_MFP_CTL3, GENMASK(23, 22),
		OWL_PIN_FUNC(0x0, "sens0"),
		OWL_PIN_FUNC(0x1, "nor"),
		OWL_PIN_FUNC(0x2, "sens1"),
		OWL_PIN_FUNC(0x3, "pwm")),
	OWL_PIN_MUX(csi_cn_cp, S500_MFP_CTL3, GENMASK(29, 28),
		OWL_PIN_FUNC(0x0, "csi"),
		OWL_PIN_FUNC(0x1, "sens0")),
	OWL_PIN_MUX(clk0_25m, S500_MFP_CTL3, BIT(30),
		OWL_PIN_FUNC(0x1, "clko_25m")),
};

static const struct owl_pinctrl_desc s500_pinctrl_desc = {
	.pins = s500_pins,
	.num_pins = ARRAY_SIZE(s500_pins),
	.groups = s500_pin_groups,
	.num_groups = ARRAY_SIZE(s500_pin_groups),
	.functions = s500_pin_functions,
	.num_functions = ARRAY_SIZE(s500_pin_functions),
	.muxes = s500_pin_muxes,
	.num_muxes = ARRAY_SIZE(s500_pin_muxes),
};

#endif
